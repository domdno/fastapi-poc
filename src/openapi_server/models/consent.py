# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.preference import Preference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Consent(BaseModel):
    """
    Given assent, approval, certification or attestation.
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Unique and common name of the agreement")
    status: StrictStr = Field(description="Indicates if the patient (or caregiver) gave or not his/her permission.  - optIn: agreed to the term and conditions  - optOut: a previously given consent (optIn) has been removed.  Only applies after an \"optIn\" was provided.  - expired (read ONLY): after providing cossent and over a period of time the consnet is not valid any more.  - notGiven (read ONLY): the consent was not provided (optIn). ")
    preferences: Optional[Annotated[List[Preference], Field(min_length=0, max_length=20)]] = Field(default=None, description="List of selected options related to the consent. Usually aplies to communications options. ")
    __properties: ClassVar[List[str]] = ["name", "status", "preferences"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('optOut', 'optIn', 'expired', 'notGiven',):
            raise ValueError("must be one of enum values ('optOut', 'optIn', 'expired', 'notGiven')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Consent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in preferences (list)
        _items = []
        if self.preferences:
            for _item in self.preferences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['preferences'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Consent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "status": obj.get("status"),
            "preferences": [Preference.from_dict(_item) for _item in obj.get("preferences")] if obj.get("preferences") is not None else None
        })
        return _obj


