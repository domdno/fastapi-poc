# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClinicalDetails(BaseModel):
    """
    Details of the patient's medical condition treated with the BI brand
    """ # noqa: E501
    icd_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=20)]] = Field(default=None, description="International Classification of Diseases (ICD) code such as ICD-10 as published by the World Health Organization.", alias="icdCode")
    indication: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Reason to use the medication. ")
    diagnosis_date: Optional[date] = Field(default=None, description="Date when the underlying medical condition was found.", alias="diagnosisDate")
    prior_treatments: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=255)]], Field(min_length=1, max_length=50)]] = Field(default=None, description="Treatements already tried  to manage the medical indication.", alias="priorTreatments")
    concomitant_medications: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Drugs used or given at or almost at the same time as part of the therapy. ", alias="concomitantMedications")
    brand_adherence: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Indicates if the patient has taken the brand prescription before, or it's the first time. For example: firstTime or takenBefore", alias="brandAdherence")
    last_dose_date: Optional[date] = Field(default=None, description="If taken the drug before, indicates the last time it was administered. ", alias="lastDoseDate")
    therapy_start_date: Optional[date] = Field(default=None, description="Date of BI medication intake", alias="therapyStartDate")
    support_persons_number: Optional[Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]]] = Field(default=None, description="Indicates the numbers of family, friends and/or cate team persons helping the patient through their journey.", alias="supportPersonsNumber")
    drug_allergies: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=255)]], Field(min_length=1, max_length=50)]] = Field(default=None, description="Known drug allergies such as concomitant medications.", alias="drugAllergies")
    prescription: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["icdCode", "indication", "diagnosisDate", "priorTreatments", "concomitantMedications", "brandAdherence", "lastDoseDate", "therapyStartDate", "supportPersonsNumber", "drugAllergies", "prescription"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClinicalDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of prescription
        if self.prescription:
            _dict['prescription'] = self.prescription.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClinicalDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "icdCode": obj.get("icdCode"),
            "indication": obj.get("indication"),
            "diagnosisDate": obj.get("diagnosisDate"),
            "priorTreatments": obj.get("priorTreatments"),
            "concomitantMedications": obj.get("concomitantMedications"),
            "brandAdherence": obj.get("brandAdherence"),
            "lastDoseDate": obj.get("lastDoseDate"),
            "therapyStartDate": obj.get("therapyStartDate"),
            "supportPersonsNumber": obj.get("supportPersonsNumber"),
            "drugAllergies": obj.get("drugAllergies"),
            "prescription": Prescription.from_dict(obj.get("prescription")) if obj.get("prescription") is not None else None
        })
        return _obj


