# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.address_optional import AddressOptional
from openapi_server.models.communication import Communication
from openapi_server.models.consent import Consent
from openapi_server.models.prospect_registration_survey import ProspectRegistrationSurvey
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProspectRegistration(BaseModel):
    """
    Individual that would like to receive brand updates for themselves or a loved one.
    """ # noqa: E501
    prospect_id: Optional[Annotated[str, Field(min_length=15, strict=True, max_length=15)]] = Field(default=None, description="BI's unique identifier (MDM ID). Response (read) Only.", alias="prospectId")
    first_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Individual's first/given name", alias="firstName")
    last_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Individual's legal Last/Family Name", alias="lastName")
    above18: Optional[StrictBool] = Field(default=None, description="It defines if the individual is above 18 years old or not. ")
    communications: Annotated[List[Communication], Field(min_length=1, max_length=5)] = Field(description="Means available to reach the individual. ")
    address: Optional[AddressOptional] = None
    consents_and_preferences: Annotated[List[Consent], Field(min_length=1)] = Field(description="List of consents, attestations and opt-ins and opt-outs the patient has provided to BI and partners", alias="consentsAndPreferences")
    preferences_link_token: Optional[StrictStr] = Field(default=None, description="Personalized individual's token to a BI's Preference Center where a patient can manage their consents and preferences.", alias="preferencesLinkToken")
    survey: ProspectRegistrationSurvey
    marketing_campaign_source_code: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Represents the (detailed) source of the data.  A source code is used for tracking leads in the marketing system.  One source code each enrollment channel will be setup for every brand for program launch.       ", alias="marketingCampaignSourceCode")
    data_provider_id: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="BI assigned partner unique identifier for a particular partner channel used to gather the Patient's information. For example if the same parter has web and phone changel, then there will be two unique identifier for the same partner one for web and another for phone. ", alias="dataProviderId")
    __properties: ClassVar[List[str]] = ["prospectId", "firstName", "lastName", "above18", "communications", "address", "consentsAndPreferences", "preferencesLinkToken", "survey", "marketingCampaignSourceCode", "dataProviderId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProspectRegistration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "prospect_id",
                "preferences_link_token",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in communications (list)
        _items = []
        if self.communications:
            for _item in self.communications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['communications'] = _items
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in consents_and_preferences (list)
        _items = []
        if self.consents_and_preferences:
            for _item in self.consents_and_preferences:
                if _item:
                    _items.append(_item.to_dict())
            _dict['consentsAndPreferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of survey
        if self.survey:
            _dict['survey'] = self.survey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProspectRegistration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prospectId": obj.get("prospectId"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "above18": obj.get("above18"),
            "communications": [Communication.from_dict(_item) for _item in obj.get("communications")] if obj.get("communications") is not None else None,
            "address": AddressOptional.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "consentsAndPreferences": [Consent.from_dict(_item) for _item in obj.get("consentsAndPreferences")] if obj.get("consentsAndPreferences") is not None else None,
            "preferencesLinkToken": obj.get("preferencesLinkToken"),
            "survey": ProspectRegistrationSurvey.from_dict(obj.get("survey")) if obj.get("survey") is not None else None,
            "marketingCampaignSourceCode": obj.get("marketingCampaignSourceCode"),
            "dataProviderId": obj.get("dataProviderId")
        })
        return _obj


