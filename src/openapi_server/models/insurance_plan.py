# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InsurancePlan(BaseModel):
    """
    Insurance plan details
    """ # noqa: E501
    plan_type: StrictStr = Field(description="Type of insurance plan.", alias="planType")
    plan_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Pharmacy Insurace Plan Name.", alias="planName")
    rx_bin: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Patient's Prescription Insurance BIN. A routing number enabling pharmacies to electronically transmit prescription claims for processing and reimbursement.", alias="rxBin")
    rx_pcn: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Patient's Prescription Insurance PCN,  a code assigned by health insurance companies to identify the patient's membership in a specific group health plan.It servers as secondary number for routing claims.", alias="rxPcn")
    group_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Patient's Insurance Group. A code assigned by a health insurance company to identify patients membership in a specific group health plan.", alias="groupNumber")
    member_id: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=50)]] = Field(default=None, description="Patient's  Insurance Assigned Membership identification (also know as policy Id for medical)", alias="memberId")
    provider: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Company name that offers the insurance.")
    provider_phone_number: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=15)]] = Field(default=None, description="Insurance companies contact phone number for coverage and claims. ", alias="providerPhoneNumber")
    provider_payer_type: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Payer type such as commercial or goverment.      ", alias="providerPayerType")
    policyholder_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=100)]] = Field(default=None, description="Policy holder full name (First and Last name), could be the patient or a relative.", alias="policyholderName")
    policyholder_birth_date: Optional[date] = Field(default=None, description="Policy holder date of birth.", alias="policyholderBirthDate")
    medication_tier: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="It refers to the classification of medications within an insurance plan's formulary. It categorizes drugs based on factors like cost, effectiveness, and availability, with each tier having different cost-sharing structures.", alias="medicationTier")
    coinsurance_percentage: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Amount/percentage to be paid by the patient.", alias="coinsurancePercentage")
    insurance_hierarchy: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Current priority of the insurance if a patient has multiple insurance.", alias="insuranceHierarchy")
    individual_deductible: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The amount of money a person must pay out-of-pocket for healthcare services before their insurance plan begins.", alias="individualDeductible")
    family_deductible: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The total amount a family must pay out-of-pocket for healthcare services before the insurance plan begins to cover expenses for all family members under the same policy.", alias="familyDeductible")
    max_out_of_pocket_total: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="The highest amount (Out-of-Pocket Total) a person or family will have to pay for covered healthcare services in a plan year.  ", alias="maxOutOfPocketTotal")
    specialty_pharmacy_required: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="If Specialty pharmacy is mandatory in case of particular medication.", alias="specialtyPharmacyRequired")
    specialty_pharmacy_preferred: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="If Specialty pharmacy is preferred in case of particular medication.", alias="specialtyPharmacyPreferred")
    specialty_pharmacy_npi: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Unique identifier of the Specialty Pharmacy.", alias="specialtyPharmacyNPI")
    __properties: ClassVar[List[str]] = ["planType", "planName", "rxBin", "rxPcn", "groupNumber", "memberId", "provider", "providerPhoneNumber", "providerPayerType", "policyholderName", "policyholderBirthDate", "medicationTier", "coinsurancePercentage", "insuranceHierarchy", "individualDeductible", "familyDeductible", "maxOutOfPocketTotal", "specialtyPharmacyRequired", "specialtyPharmacyPreferred", "specialtyPharmacyNPI"]

    @field_validator('plan_type')
    def plan_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('pharmacy', 'medical',):
            raise ValueError("must be one of enum values ('pharmacy', 'medical')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InsurancePlan from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InsurancePlan from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "planType": obj.get("planType"),
            "planName": obj.get("planName"),
            "rxBin": obj.get("rxBin"),
            "rxPcn": obj.get("rxPcn"),
            "groupNumber": obj.get("groupNumber"),
            "memberId": obj.get("memberId"),
            "provider": obj.get("provider"),
            "providerPhoneNumber": obj.get("providerPhoneNumber"),
            "providerPayerType": obj.get("providerPayerType"),
            "policyholderName": obj.get("policyholderName"),
            "policyholderBirthDate": obj.get("policyholderBirthDate"),
            "medicationTier": obj.get("medicationTier"),
            "coinsurancePercentage": obj.get("coinsurancePercentage"),
            "insuranceHierarchy": obj.get("insuranceHierarchy"),
            "individualDeductible": obj.get("individualDeductible"),
            "familyDeductible": obj.get("familyDeductible"),
            "maxOutOfPocketTotal": obj.get("maxOutOfPocketTotal"),
            "specialtyPharmacyRequired": obj.get("specialtyPharmacyRequired"),
            "specialtyPharmacyPreferred": obj.get("specialtyPharmacyPreferred"),
            "specialtyPharmacyNPI": obj.get("specialtyPharmacyNPI")
        })
        return _obj


