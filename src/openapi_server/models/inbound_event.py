# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401



from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from openapi_server.models.consents_update_event import ConsentsUpdateEvent
from openapi_server.models.pace_update_event import PaceUpdateEvent
from typing import Union, Any, List, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal
from pydantic import StrictStr, Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

INBOUNDEVENT_ANY_OF_SCHEMAS = ["ConsentsUpdateEvent", "PaceUpdateEvent"]

class InboundEvent(BaseModel):
    """
    Describes events that are allowed to be published  to the Patient Engagement Platform.
    """

    # data type: PaceUpdateEvent
    anyof_schema_1_validator: Optional[PaceUpdateEvent] = None
    # data type: ConsentsUpdateEvent
    anyof_schema_2_validator: Optional[ConsentsUpdateEvent] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[ConsentsUpdateEvent, PaceUpdateEvent]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: List[str] = Literal[INBOUNDEVENT_ANY_OF_SCHEMAS]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = InboundEvent.model_construct()
        error_messages = []
        # validate data type: PaceUpdateEvent
        if not isinstance(v, PaceUpdateEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaceUpdateEvent`")
        else:
            return v

        # validate data type: ConsentsUpdateEvent
        if not isinstance(v, ConsentsUpdateEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ConsentsUpdateEvent`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in InboundEvent with anyOf schemas: ConsentsUpdateEvent, PaceUpdateEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[PaceUpdateEvent] = None
        try:
            instance.actual_instance = PaceUpdateEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[ConsentsUpdateEvent] = None
        try:
            instance.actual_instance = ConsentsUpdateEvent.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into InboundEvent with anyOf schemas: ConsentsUpdateEvent, PaceUpdateEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


