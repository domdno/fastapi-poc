# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.address import Address
from openapi_server.models.alternate_contact import AlternateContact
from openapi_server.models.communication import Communication
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IndividualGoldenRecord(BaseModel):
    """
    Demographic data related and able to identify a person of interest to receive, approve or suppervise medical treatment. 
    """ # noqa: E501
    id: Optional[Annotated[str, Field(min_length=14, strict=True, max_length=14)]] = Field(default=None, description="BI's patient or legal caregiver/guardian unique identifier (MDM ID). Response (read) Only.")
    first_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Individual's first/given name", alias="firstName")
    last_name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="Individual's legal Last/Family Name", alias="lastName")
    birth_date: date = Field(description="Date of Birth formatted as recommended by RFC 3339", alias="birthDate")
    gender: Optional[StrictStr] = Field(default=None, description="Gender Identity. If the gender was not provided by the patient omit this field as it's optional.")
    preferred_language_code: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=2)]] = Field(default=None, description="Language preferred to receive BI comunications in ISO 639-1 codes", alias="preferredLanguageCode")
    name_prefix_code: Optional[StrictStr] = Field(default=None, description="It indicates the prefix used by a person. For eg: Value(Code): Doctor(DR), Mister(MR)", alias="namePrefixCode")
    name_suffix_code: Optional[StrictStr] = Field(default=None, description="t defines the suffix to be used by person. For eg: Value(Code): 2nd(II), 3rd(III)", alias="nameSuffixCode")
    middle_name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=50)]] = Field(default=None, description="Individual middle name", alias="middleName")
    communications: Annotated[List[Communication], Field(min_length=1, max_length=50)] = Field(description="Means available to reach the individual. ")
    addresses: Annotated[List[Address], Field(min_length=1, max_length=50)] = Field(description="List of all addresses on record (current and previous)")
    alternate_contacts: Optional[Annotated[List[AlternateContact], Field(min_length=1, max_length=50)]] = Field(default=None, description="Contact information of a person that occacionally assists the patient in their health journey.", alias="alternateContacts")
    __properties: ClassVar[List[str]] = ["id", "firstName", "lastName", "birthDate", "gender", "preferredLanguageCode", "namePrefixCode", "nameSuffixCode", "middleName", "communications", "addresses", "alternateContacts"]

    @field_validator('gender')
    def gender_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('male', 'female', 'nonBinary',):
            raise ValueError("must be one of enum values ('male', 'female', 'nonBinary')")
        return value

    @field_validator('name_prefix_code')
    def name_prefix_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MR', 'MS', 'MRS', 'DR', 'CAPT', 'COL', 'LT', 'PROF', 'REV', 'SGT', 'SIR', 'GEN', 'MJR', 'FR', 'CORP',):
            raise ValueError("must be one of enum values ('MR', 'MS', 'MRS', 'DR', 'CAPT', 'COL', 'LT', 'PROF', 'REV', 'SGT', 'SIR', 'GEN', 'MJR', 'FR', 'CORP')")
        return value

    @field_validator('name_suffix_code')
    def name_suffix_code_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('II', 'III', 'IV', 'V', 'MD', 'PHD', 'JR', 'SR',):
            raise ValueError("must be one of enum values ('II', 'III', 'IV', 'V', 'MD', 'PHD', 'JR', 'SR')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IndividualGoldenRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in communications (list)
        _items = []
        if self.communications:
            for _item in self.communications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['communications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alternate_contacts (list)
        _items = []
        if self.alternate_contacts:
            for _item in self.alternate_contacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['alternateContacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IndividualGoldenRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "birthDate": obj.get("birthDate"),
            "gender": obj.get("gender"),
            "preferredLanguageCode": obj.get("preferredLanguageCode"),
            "namePrefixCode": obj.get("namePrefixCode"),
            "nameSuffixCode": obj.get("nameSuffixCode"),
            "middleName": obj.get("middleName"),
            "communications": [Communication.from_dict(_item) for _item in obj.get("communications")] if obj.get("communications") is not None else None,
            "addresses": [Address.from_dict(_item) for _item in obj.get("addresses")] if obj.get("addresses") is not None else None,
            "alternateContacts": [AlternateContact.from_dict(_item) for _item in obj.get("alternateContacts")] if obj.get("alternateContacts") is not None else None
        })
        return _obj


