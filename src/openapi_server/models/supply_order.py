# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.individual import Individual
from openapi_server.models.supply_order_all_of_items import SupplyOrderAllOfItems
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SupplyOrder(BaseModel):
    """
    Allows to place an order for a product  (e.g. printed materias, sharps, ect)  that will help the patient treatment jorney.
    """ # noqa: E501
    data_provider_id: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="BI assigned partner unique identifier for a particular partner channel used to gather the Patient's information. For example if the same parter has web and phone changel, then there will be two unique identifier for the same partner one for web and another for phone. ", alias="dataProviderId")
    data_provider_patient_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="External BI partner/vendor patient Identifier. If the client application does not keep a patient Id (i.e. brand websites) then provide the same dataProviderTransactionId. ", alias="dataProviderPatientId")
    data_provider_transaction_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="External BI partner transaction Id (for Incident management, allows E2E tracing of this request)", alias="dataProviderTransactionId")
    customer_order_id: StrictStr = Field(description="Unique order identifier from the system that is placing the order. ", alias="customerOrderId")
    customer_order_date: datetime = Field(description="Time when the initial order was place by the customer/consumer system.", alias="customerOrderDate")
    items: Annotated[List[SupplyOrderAllOfItems], Field(min_length=1, max_length=100)] = Field(description="List of products that the patient requires. ")
    shipping_to: Individual = Field(alias="shippingTo")
    shipping_method_code: Optional[StrictStr] = Field(default=None, description="Indicates method of shipment identifier in the supply provider. Shipping codes will usually provide options for selecting a courier and speed or delivery such as standard ground, 2nd day shipping. ", alias="shippingMethodCode")
    billing_to: Optional[Individual] = Field(default=None, alias="billingTo")
    __properties: ClassVar[List[str]] = ["dataProviderId", "dataProviderPatientId", "dataProviderTransactionId", "customerOrderId", "customerOrderDate", "items", "shippingTo", "shippingMethodCode", "billingTo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SupplyOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        # override the default output from pydantic by calling `to_dict()` of shipping_to
        if self.shipping_to:
            _dict['shippingTo'] = self.shipping_to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_to
        if self.billing_to:
            _dict['billingTo'] = self.billing_to.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SupplyOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataProviderId": obj.get("dataProviderId"),
            "dataProviderPatientId": obj.get("dataProviderPatientId"),
            "dataProviderTransactionId": obj.get("dataProviderTransactionId"),
            "customerOrderId": obj.get("customerOrderId"),
            "customerOrderDate": obj.get("customerOrderDate"),
            "items": [SupplyOrderAllOfItems.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "shippingTo": Individual.from_dict(obj.get("shippingTo")) if obj.get("shippingTo") is not None else None,
            "shippingMethodCode": obj.get("shippingMethodCode"),
            "billingTo": Individual.from_dict(obj.get("billingTo")) if obj.get("billingTo") is not None else None
        })
        return _obj


