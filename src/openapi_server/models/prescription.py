# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Prescription(BaseModel):
    """
    Details of prescription as written by the HCP
    """ # noqa: E501
    drug_name: Annotated[str, Field(min_length=1, strict=True, max_length=100)] = Field(description="Bbranded drug  prescribed (e.g. OFEV).", alias="drugName")
    drug_group: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=100)]] = Field(default=None, description="The categorization of drugs based on certain shared attributes or characteristics.", alias="drugGroup")
    drug_form: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Format  of the branded drug  prescribed (Loperamide  included in kit)", alias="drugForm")
    drug_strength: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Dosage of the branded drug  prescribed (e.g. OFEV 100 or OFEV 150).", alias="drugStrength")
    medication_tier: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="It refers to the classification of medications within an insurance plan's formulary. It categorizes drugs based on factors like cost, effectiveness, and availability, with each tier having different cost-sharing structures.", alias="medicationTier")
    dispense_as_written: Optional[StrictStr] = Field(default=None, description="Instruction from a prescriber to a pharmacist to provide the exact medication prescribed without substituting or changing the order prescribed.    It could be indindicated using standard codes 1 to 9.  ", alias="dispenseAsWritten")
    signature_date: Optional[date] = Field(default=None, description="Prescription written date.", alias="signatureDate")
    quantity: Optional[Union[Annotated[float, Field(le=10000, strict=True, ge=0)], Annotated[int, Field(le=10000, strict=True, ge=0)]]] = Field(default=None, description="Amount of product authorized (i.e. 30 for thirty tablets).")
    refills: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Amount of prescriptions refils authorized.")
    add_ons: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Additional drugs provied with the medication e.g Loperamide.", alias="addOns")
    specialty_pharmacy_name: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Specialty Pharmacy assisting dispensing the patient with their prescriptions.", alias="specialtyPharmacyName")
    specialty_pharmacy_triage_date: Optional[datetime] = Field(default=None, description="It refers to the date on which a medication request or prescription for a specialty drug is reviewed and prioritized by the specialty pharmacy team.", alias="specialtyPharmacyTriageDate")
    status: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=255)]] = Field(default=None, description="Indicates ithe prescription  status for example if the Rx has been sent to the pharmacy, or triaged.")
    ship_to: Optional[StrictStr] = Field(default=None, description="To whom the pharmacy will be shipping the prescription. ", alias="shipTo")
    shipped_date: Optional[date] = Field(default=None, description="Indicates when the brand  was shipped to the patient. Gives the CE insight if the patient has their medication or if they are still waiting. ", alias="shippedDate")
    __properties: ClassVar[List[str]] = ["drugName", "drugGroup", "drugForm", "drugStrength", "medicationTier", "dispenseAsWritten", "signatureDate", "quantity", "refills", "addOns", "specialtyPharmacyName", "specialtyPharmacyTriageDate", "status", "shipTo", "shippedDate"]

    @field_validator('ship_to')
    def ship_to_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('patient', 'prescriber',):
            raise ValueError("must be one of enum values ('patient', 'prescriber')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Prescription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Prescription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "drugName": obj.get("drugName"),
            "drugGroup": obj.get("drugGroup"),
            "drugForm": obj.get("drugForm"),
            "drugStrength": obj.get("drugStrength"),
            "medicationTier": obj.get("medicationTier"),
            "dispenseAsWritten": obj.get("dispenseAsWritten"),
            "signatureDate": obj.get("signatureDate"),
            "quantity": obj.get("quantity"),
            "refills": obj.get("refills"),
            "addOns": obj.get("addOns"),
            "specialtyPharmacyName": obj.get("specialtyPharmacyName"),
            "specialtyPharmacyTriageDate": obj.get("specialtyPharmacyTriageDate"),
            "status": obj.get("status"),
            "shipTo": obj.get("shipTo"),
            "shippedDate": obj.get("shippedDate")
        })
        return _obj


