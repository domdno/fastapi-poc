# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_server.models.clinical_details import ClinicalDetails
from openapi_server.models.insurance_plan import InsurancePlan
from openapi_server.models.service_subscription import ServiceSubscription
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PatchPatientsIdServicesBrandRequest(BaseModel):
    """
    PatchPatientsIdServicesBrandRequest
    """ # noqa: E501
    clinical_details: ClinicalDetails = Field(alias="clinicalDetails")
    insurance_types: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=255)]], Field(min_length=1, max_length=10)]] = Field(default=None, description="Indicates one or more medical insurance plans are available and the plans types.  For example:  Commercial  Health Exchange  Managed Medicaid  Medicare  State Medicaid  TRICARE  VA  Other Government  ", alias="insuranceTypes")
    insurance_plans: Optional[List[InsurancePlan]] = Field(default=None, description="Patient's list of pharmacy insurance plans.", alias="insurancePlans")
    service_subscriptions: Annotated[List[ServiceSubscription], Field(min_length=1, max_length=100)] = Field(description="List of services selected by the applicant,  and offered by BI for the brand and region, that will help the patient throughout their treatment journey.    Service availables are restricted to Copay using this method. ", alias="serviceSubscriptions")
    data_provider_id: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="BI assigned partner unique identifier for a particular partner channel used to gather the Patient's information. For example if the same parter has web and phone changel, then there will be two unique identifier for the same partner one for web and another for phone. ", alias="dataProviderId")
    data_provider_patient_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="External BI partner/vendor patient Identifier. If the client application does not keep a patient Id (i.e. brand websites) then provide the same dataProviderTransactionId. ", alias="dataProviderPatientId")
    data_provider_transaction_id: Annotated[str, Field(min_length=1, strict=True, max_length=255)] = Field(description="External BI partner transaction Id (for Incident management, allows E2E tracing of this request)", alias="dataProviderTransactionId")
    __properties: ClassVar[List[str]] = ["clinicalDetails", "insuranceTypes", "insurancePlans", "serviceSubscriptions", "dataProviderId", "dataProviderPatientId", "dataProviderTransactionId"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PatchPatientsIdServicesBrandRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of clinical_details
        if self.clinical_details:
            _dict['clinicalDetails'] = self.clinical_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in insurance_plans (list)
        _items = []
        if self.insurance_plans:
            for _item in self.insurance_plans:
                if _item:
                    _items.append(_item.to_dict())
            _dict['insurancePlans'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in service_subscriptions (list)
        _items = []
        if self.service_subscriptions:
            for _item in self.service_subscriptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['serviceSubscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PatchPatientsIdServicesBrandRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clinicalDetails": ClinicalDetails.from_dict(obj.get("clinicalDetails")) if obj.get("clinicalDetails") is not None else None,
            "insuranceTypes": obj.get("insuranceTypes"),
            "insurancePlans": [InsurancePlan.from_dict(_item) for _item in obj.get("insurancePlans")] if obj.get("insurancePlans") is not None else None,
            "serviceSubscriptions": [ServiceSubscription.from_dict(_item) for _item in obj.get("serviceSubscriptions")] if obj.get("serviceSubscriptions") is not None else None,
            "dataProviderId": obj.get("dataProviderId"),
            "dataProviderPatientId": obj.get("dataProviderPatientId"),
            "dataProviderTransactionId": obj.get("dataProviderTransactionId")
        })
        return _obj


