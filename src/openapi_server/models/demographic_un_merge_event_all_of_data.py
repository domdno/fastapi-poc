# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from openapi_server.models.individual_golden_record import IndividualGoldenRecord
from openapi_server.models.individual_reference import IndividualReference
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DemographicUnMergeEventAllOfData(BaseModel):
    """
    DemographicUnMergeEventAllOfData
    """ # noqa: E501
    change_date: date = Field(description="Effective date of change in the Master Identity system. ", alias="changeDate")
    data_provider_id: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(description="BI assigned unique identifier. Determines which system initiated the event.", alias="dataProviderId")
    cross_references: Annotated[List[IndividualReference], Field(min_length=1, max_length=100)] = Field(alias="crossReferences")
    individual_type: StrictStr = Field(description="Type of Individual being created or updated.", alias="individualType")
    active_individual: IndividualGoldenRecord = Field(alias="activeIndividual")
    reoperative_individual_ids: Annotated[List[Annotated[str, Field(min_length=14, strict=True, max_length=14)]], Field(min_length=1, max_length=50)] = Field(description="List of individual records to be inoperative as a result of the merge (losser records). These records represented the same patient (or legal caregiver/guardian) but no accurately. ", alias="reoperativeIndividualIds")
    __properties: ClassVar[List[str]] = ["changeDate", "dataProviderId", "crossReferences", "individualType", "activeIndividual", "reoperativeIndividualIds"]

    @field_validator('individual_type')
    def individual_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('patient', 'legalCaregiverOrGuardian',):
            raise ValueError("must be one of enum values ('patient', 'legalCaregiverOrGuardian')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DemographicUnMergeEventAllOfData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cross_references (list)
        _items = []
        if self.cross_references:
            for _item in self.cross_references:
                if _item:
                    _items.append(_item.to_dict())
            _dict['crossReferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of active_individual
        if self.active_individual:
            _dict['activeIndividual'] = self.active_individual.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DemographicUnMergeEventAllOfData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeDate": obj.get("changeDate"),
            "dataProviderId": obj.get("dataProviderId"),
            "crossReferences": [IndividualReference.from_dict(_item) for _item in obj.get("crossReferences")] if obj.get("crossReferences") is not None else None,
            "individualType": obj.get("individualType"),
            "activeIndividual": IndividualGoldenRecord.from_dict(obj.get("activeIndividual")) if obj.get("activeIndividual") is not None else None,
            "reoperativeIndividualIds": obj.get("reoperativeIndividualIds")
        })
        return _obj


