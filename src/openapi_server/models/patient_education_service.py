# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PatientEducationService(BaseModel):
    """
    Information required to subscribe to the Clinical Education Service (portal) (also referred as Nurse Education)
    """ # noqa: E501
    service_type: StrictStr = Field(description="Brand specific service offered by BI that would help the patient throughout their treatment journey.", alias="serviceType")
    subscription_status: Optional[StrictStr] = Field(default=None, description="Latest status of the service Subscription", alias="subscriptionStatus")
    subscription_date: Optional[date] = Field(default=None, description="Indicates the latest subcription status date change, e.g. the last date when the patient optIn or optOut from the service", alias="subscriptionDate")
    territory_code: StrictStr = Field(description="CEâ€™s territory code dependant on the patient postal code.", alias="territoryCode")
    education_service_types: Optional[List[StrictStr]] = Field(default=None, description="List of types of services that the patient would like to receive education material e.g. sharps, demo pen, etc.", alias="educationServiceTypes")
    delivery_preference: Optional[StrictStr] = Field(default=None, description="Selected  type of media to deliver the clinical education information.", alias="deliveryPreference")
    injection_type: Optional[StrictStr] = Field(default=None, description="Device to administer the medication.", alias="injectionType")
    biologic_history: Optional[StrictStr] = Field(default=None, description="Indicates the experience level the patient is with their disease so the CE can know what type of conversation they would be having.", alias="biologicHistory")
    additional_injection_education_request_date: Optional[date] = Field(default=None, description="Indicates the date when the patient has requested additional education after the first request. ", alias="additionalInjectionEducationRequestDate")
    health_care_practicioner_education_request: Optional[StrictStr] = Field(default=None, description="Indicates if the Health Care Practicioner has requested  patient education. ", alias="healthCarePracticionerEducationRequest")
    prescribing_hcp_hipaa_consent_date: Optional[date] = Field(default=None, description="Indicates the date when the patient provided consent to his/her prescribing Heath Care Practicioner, of sharing protected health information. ", alias="prescribingHcpHipaaConsentDate")
    communication_type: Optional[StrictStr] = Field(default=None, description="Channel or media used to  interact with  the patient regarding the Patient Support Program (PSP). This is a \"running log of Type of communication\". The value provided will be the last value used.", alias="communicationType")
    communication_topic: Optional[StrictStr] = Field(default=None, description="Subject or Reason of contacting the patient regarding the Patient Support Program (PSP).", alias="communicationTopic")
    communication_preferred_channel: Optional[StrictStr] = Field(default=None, description="Patient preferred channel to receive updates regarding  the patient support program.", alias="communicationPreferredChannel")
    best_contact_time_preference: Optional[StrictStr] = Field(default=None, description="Enrollment  value of  \"bestContactTime\" preference (if selected). See Consents and Preferences for details.", alias="bestContactTimePreference")
    __properties: ClassVar[List[str]] = ["serviceType", "subscriptionStatus", "subscriptionDate", "territoryCode", "educationServiceTypes", "deliveryPreference", "injectionType", "biologicHistory", "additionalInjectionEducationRequestDate", "healthCarePracticionerEducationRequest", "prescribingHcpHipaaConsentDate", "communicationType", "communicationTopic", "communicationPreferredChannel", "bestContactTimePreference"]

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('patientEducation',):
            raise ValueError("must be one of enum values ('patientEducation')")
        return value

    @field_validator('subscription_status')
    def subscription_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('optIn', 'optOut',):
            raise ValueError("must be one of enum values ('optIn', 'optOut')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PatientEducationService from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PatientEducationService from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceType": obj.get("serviceType"),
            "subscriptionStatus": obj.get("subscriptionStatus"),
            "subscriptionDate": obj.get("subscriptionDate"),
            "territoryCode": obj.get("territoryCode"),
            "educationServiceTypes": obj.get("educationServiceTypes"),
            "deliveryPreference": obj.get("deliveryPreference"),
            "injectionType": obj.get("injectionType"),
            "biologicHistory": obj.get("biologicHistory"),
            "additionalInjectionEducationRequestDate": obj.get("additionalInjectionEducationRequestDate"),
            "healthCarePracticionerEducationRequest": obj.get("healthCarePracticionerEducationRequest"),
            "prescribingHcpHipaaConsentDate": obj.get("prescribingHcpHipaaConsentDate"),
            "communicationType": obj.get("communicationType"),
            "communicationTopic": obj.get("communicationTopic"),
            "communicationPreferredChannel": obj.get("communicationPreferredChannel"),
            "bestContactTimePreference": obj.get("bestContactTimePreference")
        })
        return _obj


