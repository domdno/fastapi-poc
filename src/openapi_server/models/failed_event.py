# coding: utf-8

"""
    Patient Engagement Enterprise API

    Patient Engagement Enterprise API allows multiple communication channels (e.g. websites,  HUbs, etc.) to enrroll and/or manage patient's support porgrams and services offered by Boehringer Ingelheim brands.  

    The version of the OpenAPI document: 0.7.1
    Contact: zzITEDPPatientEngagementIntegration@boehringer-ingelheim.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi_server.models.failed_event_all_of_event import FailedEventAllOfEvent
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FailedEvent(BaseModel):
    """
    Describes the error encountered while procesing an event 
    """ # noqa: E501
    event_consumer: StrictStr = Field(description="Identifier of the system consuming an event. This will allow to contact their support for further inquiries.", alias="eventConsumer")
    error_transaction_reference: StrictStr = Field(description="Unique transation identifier in the system consuming the event. This transaction reference shoudl help both team to identify the transaction or request that encounter the error. ", alias="errorTransactionReference")
    error_timestamp: datetime = Field(description="Date and time when the processing error occurred.", alias="errorTimestamp")
    error_id: StrictStr = Field(description="Unique error identifier or code. ", alias="errorId")
    error_message: StrictStr = Field(description="A human readeble description thta provides more details of the error.", alias="errorMessage")
    event: FailedEventAllOfEvent
    __properties: ClassVar[List[str]] = ["eventConsumer", "errorTransactionReference", "errorTimestamp", "errorId", "errorMessage", "event"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FailedEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FailedEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventConsumer": obj.get("eventConsumer"),
            "errorTransactionReference": obj.get("errorTransactionReference"),
            "errorTimestamp": obj.get("errorTimestamp"),
            "errorId": obj.get("errorId"),
            "errorMessage": obj.get("errorMessage"),
            "event": FailedEventAllOfEvent.from_dict(obj.get("event")) if obj.get("event") is not None else None
        })
        return _obj


